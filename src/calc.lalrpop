use std::str::FromStr;
use ast::{Statement, Expr, OpCode};

grammar;

pub Statement: Statement = {
    <p:Ident> "=" <e: Expr> => Statement::Assign(p, e),
    <Expr> => Statement::Print(<>),
    "?" <Expr> => Statement::Repr(<>),
};

pub Expr: Expr = {
    "resolve" <Expr> => Expr::Resolve(Box::new(<>)),
    LazyExpr,
};

LazyExpr = Tier<ExprOp, Factor>;
Factor = Tier<FactorOp, Term>;

Tier<Op, NextTier>: Expr = {
    Tier<Op, NextTier> Op NextTier => Expr::new_op(<>),
    NextTier,
};

ExprOp: OpCode = {
    "+" => OpCode::Add,
    "-" => OpCode::Sub,
};
FactorOp: OpCode = {
    "*" => OpCode::Mul,
    "/" => OpCode::Div,
};

pub Term: Expr = {
    <Num> => Expr::Num(<>),
    <Ident> => Expr::Ident(<>),
    "(" <Expr> ")",
};

Num: i32 = <r"[0-9]+"> => i32::from_str(<>).unwrap();
Ident: String = <r"[[:alpha:]]\w*"> => String::from(<>);
